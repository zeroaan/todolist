{"version":3,"sources":["store/reducers/todo.js","store/actions/types.js","store/reducers/index.js","store/index.js","components/Header.js","components/AddList.js","store/actions/todo.js","components/DisplayListItem.js","components/VisibleList.js","components/DisplayList.js","components/GlobalStyles.js","components/App.js","index.js"],"names":["initialState","todo","todoReducer","state","action","produce","draft","type","unshift","text","complete","invisible","splice","id","editText","map","v","filter","rootReducer","combineReducers","store","createStore","Reducer","composeWithDevTools","H1Title","styled","h1","Header","FormAdd","form","InputAdd","input","ButtonIcon","button","AddList","dispatch","useDispatch","useState","list","setList","onSubmit","e","preventDefault","placeholder","value","onChange","target","autoFocus","DivItem","div","props","$invisible","FormEdit","ButtonEdit","InputEdit","FaIconTimes","FaTimes","DivLeft","DivRight","PText","p","$complete","FaIconCheck","FaCheck","FaIconPen","FaPen","FaIconTrash","FaTrashAlt","DisplayListItem","index","useSelector","editing","setEditing","setEditText","onClickEdit","actions","onClick","DivVisible","InputVisible","clickState","PVisible","VisibleList","visibleState","all","active","setClickState","useEffect","onClickAll","DisplayList","i","key","length","globalStyles","createGlobalStyle","reset","App","GlobalStyles","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6c8ba6a1.chunk.js","sourcesContent":["import * as types from \"../actions/types\"\r\nimport produce from \"immer\"\r\n\r\nconst initialState = {\r\n  todo: [],\r\n}\r\n\r\nconst todoReducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case types.ADD_LIST:\r\n        draft.todo.unshift({ text: action.text, complete: false, invisible: false })\r\n        break\r\n      case types.DELETE_LIST:\r\n        draft.todo.splice(action.id, 1)\r\n        break\r\n      case types.EDIT_LIST:\r\n        draft.todo[action.id].text = action.editText\r\n        break\r\n      case types.COMPLETE_LIST:\r\n        draft.todo[action.id].complete = !state.todo[action.id].complete\r\n        break\r\n      case types.VISIBLE_ALL:\r\n        draft.todo.map((v) => (v.invisible = false))\r\n        break\r\n      case types.VISIBLE_ACTIVE:\r\n        draft.todo.map((v) => (v.complete ? (v.invisible = true) : (v.invisible = false)))\r\n        break\r\n      case types.VISIBLE_COMPLETED:\r\n        draft.todo.map((v) => (v.complete ? (v.invisible = false) : (v.invisible = true)))\r\n        break\r\n      case types.CLEAR_COMPLETED:\r\n        draft.todo = state.todo.filter((v) => !v.complete)\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  })\r\n}\r\n\r\nexport default todoReducer\r\n","export const ADD_LIST = \"add_list\";\r\nexport const DELETE_LIST = \"delete_list\";\r\nexport const EDIT_LIST = \"edit_list\";\r\nexport const COMPLETE_LIST = \"complete_list\";\r\n\r\nexport const VISIBLE_ALL = \"visible_all\";\r\nexport const VISIBLE_ACTIVE = \"visible_active\";\r\nexport const VISIBLE_COMPLETED = \"visible_completed\";\r\nexport const CLEAR_COMPLETED = \"clear_completed\";\r\n","import { combineReducers } from \"redux\";\r\nimport todo from \"./todo\";\r\n\r\nconst rootReducer = combineReducers({\r\n  todo,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\"\r\nimport { composeWithDevTools } from \"redux-devtools-extension\"\r\n\r\nimport Reducer from \"store/reducers\"\r\n\r\nconst store = createStore(Reducer, composeWithDevTools())\r\n\r\nexport default store\r\n","import React from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\nconst H1Title = styled.h1`\r\n  font-size: 80px;\r\n  color: rgb(0, 175, 175);\r\n  text-align: center;\r\n  margin: 50px 0;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 40px;\r\n    margin: 30px 0;\r\n  }\r\n`\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <H1Title>To Do List</H1Title>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport styled from \"styled-components\"\r\n\r\nimport { FaRegPaperPlane } from \"react-icons/fa\"\r\n\r\nimport * as actions from \"../store/actions/todo\"\r\n\r\nconst FormAdd = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: 1px solid rgb(235, 235, 235);\r\n  background-color: white;\r\n  width: 800px;\r\n  height: 70px;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    width: 350px;\r\n  }\r\n`\r\n\r\nconst InputAdd = styled.input`\r\n  font-family: \"Ubuntu\", sans-serif;\r\n  font-size: 22px;\r\n  outline: none;\r\n  border: none;\r\n  width: 500px;\r\n  height: 40px;\r\n  color: black;\r\n\r\n  &:focus {\r\n    color: rgb(0, 175, 175);\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 13px;\r\n    width: 200px;\r\n  }\r\n`\r\n\r\nconst ButtonIcon = styled.button`\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: none;\r\n  font-size: 22px;\r\n  background-color: white;\r\n  color: rgb(0, 175, 175);\r\n  padding: 10px;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 14px;\r\n  }\r\n`\r\n\r\nconst AddList = () => {\r\n  const dispatch = useDispatch()\r\n  const [list, setList] = useState(\"\")\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (list !== \"\") {\r\n      dispatch(actions.addList(list))\r\n      setList(\"\")\r\n    }\r\n  }\r\n  const onChange = (e) => {\r\n    const { value } = e.target\r\n    setList(value)\r\n  }\r\n\r\n  return (\r\n    <FormAdd onSubmit={onSubmit}>\r\n      <InputAdd type=\"text\" placeholder=\"할 일 입력\" value={list} onChange={onChange} autoFocus />\r\n      <ButtonIcon>\r\n        <FaRegPaperPlane />\r\n      </ButtonIcon>\r\n    </FormAdd>\r\n  )\r\n}\r\n\r\nexport default AddList\r\n","import * as types from \"./types\"\r\n\r\nexport const addList = (text) => {\r\n  return {\r\n    type: types.ADD_LIST,\r\n    text: text,\r\n  }\r\n}\r\nexport const deleteList = (id) => {\r\n  return {\r\n    type: types.DELETE_LIST,\r\n    id: id,\r\n  }\r\n}\r\nexport const editList = (editText, id) => {\r\n  return {\r\n    type: types.EDIT_LIST,\r\n    id: id,\r\n    editText: editText,\r\n  }\r\n}\r\nexport const completeList = (id) => {\r\n  return {\r\n    type: types.COMPLETE_LIST,\r\n    id: id,\r\n  }\r\n}\r\n\r\nexport const visibleAll = () => {\r\n  return {\r\n    type: types.VISIBLE_ALL,\r\n  }\r\n}\r\nexport const visibleActive = () => {\r\n  return {\r\n    type: types.VISIBLE_ACTIVE,\r\n  }\r\n}\r\nexport const visibleCompleted = () => {\r\n  return {\r\n    type: types.VISIBLE_COMPLETED,\r\n  }\r\n}\r\nexport const clearCompleted = () => {\r\n  return {\r\n    type: types.CLEAR_COMPLETED,\r\n  }\r\n}\r\n","import React, { useState } from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport styled from \"styled-components\"\r\n\r\nimport { FaEdit, FaTimes, FaCheck, FaPen, FaTrashAlt } from \"react-icons/fa\"\r\n\r\nimport * as actions from \"store/actions/todo\"\r\n\r\nconst DivItem = styled.div`\r\n  position: relative;\r\n  display: ${(props) => (props.$invisible ? \"none\" : \"flex\")};\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border: 1px solid rgb(235, 235, 235);\r\n  background-color: white;\r\n  width: 800px;\r\n  height: 70px;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    width: 350px;\r\n  }\r\n`\r\n\r\nconst FormEdit = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n`\r\nconst ButtonEdit = styled.button`\r\n  cursor: pointer;\r\n  outline: none;\r\n  border: none;\r\n  margin: 10px;\r\n  padding: 0px;\r\n  font-size: 22px;\r\n  background-color: white;\r\n  color: rgb(129, 200, 255);\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    color: rgb(47, 165, 255);\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 16px;\r\n  }\r\n`\r\nconst InputEdit = styled.input`\r\n  font-family: \"Ubuntu\", sans-serif;\r\n  font-size: 16px;\r\n  outline: none;\r\n  border: none;\r\n  border-radius: 20px;\r\n  background-color: rgb(240, 240, 240);\r\n  width: 500px;\r\n  height: 35px;\r\n  padding: 0 15px;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 11px;\r\n    width: 150px;\r\n  }\r\n`\r\nconst FaIconTimes = styled(FaTimes)`\r\n  cursor: pointer;\r\n  margin: 10px;\r\n  width: 23px;\r\n  height: 23px;\r\n  color: rgb(255, 175, 175);\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    color: rgb(255, 100, 100);\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    width: 18px;\r\n    height: 18px;\r\n  }\r\n`\r\n\r\nconst DivLeft = styled.div`\r\n  width: 13%;\r\n  justify-content: flex-start;\r\n  margin: 0 10px;\r\n`\r\nconst DivRight = styled.div`\r\n  width: 13%;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin: 0 10px;\r\n`\r\n\r\nconst PText = styled.p`\r\n  text-decoration: ${(props) => (props.$complete ? \"line-through\" : \"none\")};\r\n  color: ${(props) => (props.$complete ? \"rgb(200, 200, 200)\" : \"black\")};\r\n  font-size: 22px;\r\n  width: 70%;\r\n  margin: 0 10px;\r\n  overflow: hidden;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 13px;\r\n  }\r\n`\r\nconst FaIconCheck = styled(FaCheck)`\r\n  cursor: pointer;\r\n  margin: 0 10px;\r\n  padding: 3px;\r\n  width: 25px;\r\n  height: 25px;\r\n  color: ${(props) => (props.$complete ? \"rgb(0, 175, 175)\" : \"transparent\")};\r\n  border: 1px solid rgb(225, 225, 225);\r\n  border-radius: 50%;\r\n  transition: all 0.1s ease;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n`\r\nconst FaIconPen = styled(FaPen)`\r\n  cursor: pointer;\r\n  margin: 0 10px;\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: white;\r\n  color: rgb(129, 200, 255);\r\n  transition: all 0.3s ease;\r\n  opacity: ${(props) => (props.$complete ? \"0\" : \"1\")};\r\n\r\n  &:hover {\r\n    color: rgb(47, 165, 255);\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    width: 15px;\r\n    height: 15px;\r\n  }\r\n`\r\nconst FaIconTrash = styled(FaTrashAlt)`\r\n  cursor: pointer;\r\n  margin: 0 10px;\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: white;\r\n  color: rgb(255, 175, 175);\r\n  transition: all 0.3s ease;\r\n\r\n  &:hover {\r\n    color: rgb(255, 100, 100);\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    width: 15px;\r\n    height: 15px;\r\n  }\r\n`\r\n\r\nconst DisplayListItem = ({ text, index }) => {\r\n  const { todo } = useSelector((store) => store.todo)\r\n  const dispatch = useDispatch()\r\n\r\n  const [editing, setEditing] = useState(false)\r\n  const [editText, setEditText] = useState(todo[index].text)\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (editText !== \"\") {\r\n      dispatch(actions.editList(editText, index))\r\n      setEditing(!editing)\r\n    }\r\n  }\r\n  const onChange = (e) => {\r\n    const { value } = e.target\r\n    setEditText(value)\r\n  }\r\n  const onClickEdit = () => {\r\n    setEditing(!editing)\r\n    setEditText(todo[index].text)\r\n  }\r\n  const onClickDelete = () => {\r\n    dispatch(actions.deleteList(index))\r\n  }\r\n  const onClickComplete = () => {\r\n    dispatch(actions.completeList(index))\r\n  }\r\n\r\n  return (\r\n    <DivItem $invisible={todo[index].invisible}>\r\n      {editing ? (\r\n        <>\r\n          <FormEdit onSubmit={onSubmit}>\r\n            <ButtonEdit>\r\n              <FaEdit />\r\n            </ButtonEdit>\r\n            <InputEdit type=\"text\" value={editText} onChange={onChange} placeholder=\"내용 입력\" autoFocus />\r\n            <FaIconTimes onClick={onClickEdit} />\r\n          </FormEdit>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <DivLeft>\r\n            <FaIconCheck $complete={todo[index].complete} onClick={onClickComplete} />\r\n          </DivLeft>\r\n          <PText $complete={todo[index].complete}>{text}</PText>\r\n          <DivRight>\r\n            <FaIconPen $complete={todo[index].complete} onClick={onClickEdit} />\r\n            <FaIconTrash onClick={onClickDelete} />\r\n          </DivRight>\r\n        </>\r\n      )}\r\n    </DivItem>\r\n  )\r\n}\r\n\r\nexport default DisplayListItem\r\n","import React, { useState, useEffect } from \"react\"\r\nimport { useDispatch } from \"react-redux\"\r\nimport styled from \"styled-components\"\r\n\r\nimport * as actions from \"store/actions/todo\"\r\n\r\nconst DivVisible = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border: 1px solid rgb(235, 235, 235);\r\n  background-color: white;\r\n  width: 800px;\r\n  height: 50px;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    justify-content: flex-start;\r\n    width: 350px;\r\n  }\r\n`\r\n\r\nconst InputVisible = styled.input`\r\n  font-family: \"Ubuntu\", sans-serif;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  outline: none;\r\n  color: rgb(100, 100, 100);\r\n  background-color: ${(props) => (props.clickState ? \"rgb(230, 230, 230)\" : \"white\")};\r\n  border: 1px solid ${(props) => (props.clickState ? \"rgb(230, 230, 230)\" : \"white\")};\r\n  border-radius: 20px;\r\n  margin: 5px;\r\n  width: 90px;\r\n  height: 33px;\r\n  transition: all 0.2s ease;\r\n\r\n  &:hover {\r\n    border: 1px solid rgb(230, 230, 230);\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    font-size: 8px;\r\n    width: 65px;\r\n    height: 27px;\r\n  }\r\n`\r\n\r\nconst PVisible = styled.p`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  right: 20px;\r\n  font-size: 14px;\r\n  color: rgb(100, 100, 100);\r\n  transition: all 0.1s ease;\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n    color: rgb(255, 100, 100);\r\n  }\r\n\r\n  @media screen and (max-width: 768px) {\r\n    right: 10px;\r\n    font-size: 8px;\r\n  }\r\n`\r\n\r\nconst VisibleList = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  const visibleState = { all: false, active: false, complete: false }\r\n  const [clickState, setClickState] = useState(visibleState)\r\n\r\n  useEffect(() => {\r\n    onClickAll()\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  const onClickAll = () => {\r\n    dispatch(actions.visibleAll())\r\n    setClickState({ ...visibleState, all: true })\r\n  }\r\n  const onClickActive = () => {\r\n    dispatch(actions.visibleActive())\r\n    setClickState({ ...visibleState, active: true })\r\n  }\r\n  const onClickCompleted = () => {\r\n    dispatch(actions.visibleCompleted())\r\n    setClickState({ ...visibleState, complete: true })\r\n  }\r\n  const onClickClearCompleted = () => {\r\n    dispatch(actions.clearCompleted())\r\n    onClickAll()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <DivVisible>\r\n        <InputVisible type=\"button\" value=\"All\" clickState={clickState.all} onClick={onClickAll} />\r\n        <InputVisible type=\"button\" value=\"Active\" clickState={clickState.active} onClick={onClickActive} />\r\n        <InputVisible type=\"button\" value=\"Completed\" clickState={clickState.complete} onClick={onClickCompleted} />\r\n        <PVisible onClick={onClickClearCompleted}>Clear completed</PVisible>\r\n      </DivVisible>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default VisibleList\r\n","import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\nimport DisplayListItem from \"components/DisplayListItem\"\r\nimport VisibleList from \"components/VisibleList\"\r\n\r\nconst DisplayList = () => {\r\n  const { todo } = useSelector((store) => store.todo)\r\n\r\n  return (\r\n    <>\r\n      {todo.map((v, i) => (\r\n        <DisplayListItem key={v.text + i} text={v.text} index={i} />\r\n      ))}\r\n      {todo.length > 0 && <VisibleList />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DisplayList\r\n","import { createGlobalStyle } from \"styled-components\"\r\nimport reset from \"styled-reset\"\r\n\r\nconst globalStyles = createGlobalStyle`\r\n  ${reset}\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    background-color: rgb(240, 240, 240);\r\n    font-family: \"Ubuntu\", sans-serif;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    min-height: 100vh;\r\n    padding-bottom: 70px;\r\n\r\n    \r\n    &::-webkit-scrollbar {\r\n      width: 11px;\r\n      height: 11px;\r\n    }\r\n    &::-webkit-scrollbar-thumb {\r\n      background-color: rgba(0, 175, 175, 0.7);\r\n      border-radius: 10px;\r\n    }\r\n    &::-webkit-scrollbar-track {\r\n      background-color: rgb(218, 219, 226);\r\n      border-radius: 10px;\r\n    }\r\n  }\r\n`\r\nexport default globalStyles\r\n","import React from \"react\"\n\nimport Header from \"components/Header\"\nimport AddList from \"components/AddList\"\nimport DisplayList from \"components/DisplayList\"\nimport GlobalStyles from \"components/GlobalStyles\"\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      <AddList />\n      <DisplayList />\n      <GlobalStyles />\n    </>\n  )\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\n\nimport store from \"store\"\n\nimport App from \"components/App\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}